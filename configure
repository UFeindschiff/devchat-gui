#!/usr/bin/python
import optparse,os,sys
f = open("src/config.h","w")

f.write('#define APPNAME "DevchatGUI"\n')
f.write('#define VERSION "0.6.2"\n')
f.write('int debug;\nint real_debug;\nint no_config;\nint no_spellcheck;\n')

libs = "gtk+-2.0 libxml-2.0 libsoup-2.4"

makefile = """
all:
\tmkdir -p _build/bin
\t$(CC) $(CCARGS) `pkg-config --cflags --libs $(LIBS)` src/HTMLent.c src/devchat_cb_data.c src/devchat_conversation.c src/devchat_url_tag.c src/devchat_html_attr.c src/devchat_html_tag.c src/devchat_window.c src/main.c -o _build/bin/dcgui

clean:
\t@if [ -d _build ]; then rm -rv _build;fi

love:
\t@echo "Not war?"

me:
\t@true
a:
\t@true
sandwich:
\t@if [[ $EUID -ne 0 ]]; then echo "What? Make it yourself."; else echo "Okay."; fi

distclean: clean
\trm src/config.h

install:
\tinstall -Dm755 _build/bin/dcgui $(DESTDIR)/bin/devchat-gui
\tinstall -Dm644 share/applications/dcgui.desktop $(DESTDIR)/share/applications/devchat-gui.desktop
\tmkdir -m755 -p ${DESTDIR}/share/pixmaps/devchat
\tinstall -m644 share/pixmaps/devchat/* -t ${DESTDIR}/share/pixmaps/devchat
\tmkdir -m755 -p ${DESTDIR}/share/sounds/devchat
\tinstall -m644 share/sounds/devchat/* -t ${DESTDIR}/share/sounds/devchat

uninstall:
\trm $(DESTDIR)/bin/devchat-gui
\trm $(DESTDIR)/share/applications/devchat-gui.desktop
\trm -r $(DESTDIR)/share/pixmaps/devchat
\trm -r $(DESTDIR)/share/sounds/devchat
"""

parser = optparse.OptionParser()
parser.add_option("-p","--prefix",action="store",type="string",dest="prefix",default="/usr/local",help="Installation prefix (default /usr/local).")
parser.add_option("-d","--enable-debug",action="store_true",dest="debugS",default=False,help="Only kept for compatibility reasons. Equal to --enable-debugging-symbols (default no).")
parser.add_option("-s","--enable-debugging-symbols",action="store_true",dest="debugS",default=False,help="Add debugging symbols. Useful for automated debugging (default no).")
parser.add_option("-n","--enable-libnotify",action="store_true",dest="notify",default=True,help="Enable libnotify visual notifications (default yes).")
parser.add_option("-N","--disable-libnotify",action="store_false",dest="notify",help="Disable libnotify visual notifications (default no).")
parser.add_option("-o","--enable-otr",action="store_true",dest="otr",default=False,help="Enable Off-The-Record encryption support. NOTE: UNFINISHED. WILL BREAK COMPILING AND KILL KITTEN. You have been warned (default: Don't even think about it).")
parser.add_option("-l","--enable-nls",action="store_true",dest="l10n",default=False,help="Enable translations (not implemented, default yes).")
parser.add_option("-c","--enable-spellcheck",action="store_true",dest="spell",default=True,help="Enable spell checking support (default yes).")
parser.add_option("-C","--disable-spellcheck",action="store_false",dest="spell",help="Enable spell checking support (default no).")

(options,args) = parser.parse_args()

ccargs = "-O2 -Wall -march=native"

print ("Writing options to config.h ...")

if options.debugS:
  ccargs = "-g -O0 -Wall"
if options.notify:
  libs += " libnotify"
  f.write('#ifndef G_OS_WIN32\n#define NOTIFY\n#endif\n')
if options.otr:
  libs += " libotr"
  f.write('#define OTR\n')
if options.l10n:
  f.write('#define NLS\n')
  os.system('xgettext -o po/dcgui.pot -C -k_ --from-code=utf-8 src/*')
if options.spell:
	libs += " gtkspell-2.0"
	f.write('#define SPELLCHECK\n')

f.close()
print ("Checking whether build environment is sane...")
m = open("Makefile","w")

if os.name == "posix":
  if os.path.exists("/usr/bin/clang") or os.path.exists("/usr/local/bin/clang"):
    print ("Detected CLang compiler, OK.")
    m.write ("CC = clang\n")
  elif os.path.exists("/usr/bin/gcc") or os.path.exists("/usr/local/bin/gcc"):
    print ("Detected GCC compiler, OK.")
    m.write("CC = gcc\n")
  else:
    print ("Build environment is grinning and holding a spatula. Guess not.")
    sys.exit(-1)
elif os.name == "nt":
  print ("Please contact your next exorcist for help with compiling on Windows.")
  sys.exit(-42)

print ("Checking for libraries...")

for lib in libs.split(" "):
  print ("Checking " + lib)
  if os.path.exists ("/usr/lib/pkgconfig/"+lib+".pc"):
    print ("OK.")
  else:
    print ("ERR: Lib " + lib + " not found.")
    sys.exit(-2)

m.write("LIBS = %s\n"%libs)
m.write("DESTDIR = %s\n"%options.prefix)
m.write("CCARGS = %s\n"%ccargs)

m.write(makefile)
m.close()

print ("Creating translation binaries...")
for f in os.listdir ("po/"):
  os.system ("msgfmt -o share/locale/"+f.split(".")[0]+"/LC_MESSAGES/dcgui.mo "+f);

print ("This was a triumph.\nI'm making a note here, huge success!\n*wanders off singing*")
